{"version":3,"sources":["logo.svg","components/Header/index.js","components/Header/Header.tsx","components/Table/index.js","components/Table/Table.tsx","components/Chart/Chart.tsx","components/Chart/index.js","api.ts","components/CurrencyView/index.js","components/CurrencyView/CurrencyView.tsx","components/Footer/index.js","components/Footer/Footer.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","Module","children","className","src","logo","alt","data","fields","maxRows","map","field","key","slice","elem","CustomizedAxisTick","x","y","textColor","payload","transform","dy","textAnchor","fill","value","xAxisDataKey","width","height","dataKey","tick","stroke","strokeDasharray","type","layout","align","verticalAlign","date","rates","base","toLowerCase","RUB","Object","keys","reduce","obj","getCurrencyRates","currencies","periodFrom","a","periodTo","length","range","url","requests","currency","fetch","method","Promise","all","responses","response","json","mergeArrays","reject","Error","array","shift","forEach","i","useState","state","setState","useEffect","timerID","setInterval","then","prevState","catch","error","console","message","parseInt","process","clearInterval","dates","renderData","reverse","href","target","rel","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5d6e24e7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import Module from './Header';\n\nexport default Module;\n","import React from 'react';\n\nimport logo from 'logo.svg';\n\nimport './header.scss';\n\nconst Header: React.FunctionComponent = ({children}) => (\n  <header className=\"header\">\n    <img src={logo} className=\"header__logo\" alt=\"CurrencyView logo\" />\n    <div className=\"header__title\">Currencies view</div>\n    {children}\n  </header>\n);\n\nexport default Header;\n","import Module from './Table';\n\nexport default Module;\n","import React from 'react';\n\nimport './table.scss';\n\ninterface ITableProps {\n  data: any[],\n  fields: string[],\n  maxRows: number,\n}\n\nconst Table = ({data, fields, maxRows}: ITableProps) => (\n  <table className=\"table\">\n    <thead>\n      <tr>\n        {fields.map(field => (<th key={field}>{field}</th>))}\n      </tr>\n    </thead>\n    <tbody>\n      {data.slice(0, maxRows).map(elem => (\n        <tr key={elem[fields[0]]}>\n          {fields.map(field => (<td key={elem[fields[0]] + field}>{elem[field]}</td>))}\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n\nexport default Table;\n","import React from 'react';\nimport {LineChart, Line, Legend, CartesianGrid, XAxis, YAxis, Tooltip, ResponsiveContainer} from 'recharts';\n\ninterface IAxisProps {\n  x?: number;\n  y?: number;\n  textColor: string;\n  payload?: any\n}\n\ninterface IChartProps {\n  data: any[];\n  xAxisDataKey: string;\n}\n\nconst CustomizedAxisTick = ({x, y, textColor, payload}: IAxisProps) => (\n  <g transform={`translate(${x},${y})`}>\n    <text x={0} y={0} dy={16} textAnchor=\"end\" fill={textColor} transform=\"rotate(-45)\">\n      {payload.value}\n    </text>\n  </g>\n);\n\nconst chartElemColor = '#666';\n\nconst Chart = ({data, xAxisDataKey}: IChartProps) => (\n  <ResponsiveContainer width=\"80%\" height={350}>\n    <LineChart data={data}>\n      <XAxis dataKey={xAxisDataKey} height={80} tick={<CustomizedAxisTick textColor={chartElemColor}/>} />\n      <YAxis />\n      <CartesianGrid stroke={chartElemColor} strokeDasharray=\"3 3\" />\n      <Line type=\"monotone\" dataKey=\"usd\" stroke=\"#8884d8\" />\n      <Line type=\"monotone\" dataKey=\"eur\" stroke=\"#82ca9d\" />\n      <Tooltip />\n      <Legend layout=\"vertical\" align=\"right\" verticalAlign=\"middle\" />\n    </LineChart>\n  </ResponsiveContainer>\n);\n\nexport default Chart;\n","import Module from './Chart';\n\nexport default Module;\n","interface ICurrencyRateData {\n  amount: number;\n  base: string;\n  date?: string;\n  rates: any;\n}\n\nconst transform = (data: ICurrencyRateData) => {\n  const {date, rates} = data;\n  const base = data.base.toLowerCase();\n\n  if (!date) {\n    return Object.keys(rates).reduce(\n        (obj, key) => ({...obj, [key]: {[base]: rates[key].RUB}}),\n        {},\n    );\n  } else {\n    return {[date]: {[base]: rates.RUB}};\n  }\n};\n\n/**\n * Requests currency rates for up to 90 days. Above that, it starts sampling by week or month based on the\n * breadth of the date range (https://www.frankfurter.app/docs/).\n * @param {string[]} currencies - collection of currencies.\n * @param {string | undefined} [periodFrom] - period of start.\n * @param {string} [periodTo] - period of end. If is not provided, it'd request data up to the present.\n * @return {Promise} promise with data.\n*/\nconst getCurrencyRates = async (currencies: string[], periodFrom?: string, periodTo: string = ''): Promise<any> => {\n  if (currencies && currencies.length) {\n    let range = 'latest';\n    if (periodFrom) {\n      range = `${periodFrom}..${periodTo}`;\n    }\n\n    const url = `https://api.frankfurter.app/${range}?to=RUB`;\n    const requests = currencies.map(currency =>\n      fetch(url + `&from=${currency}`, {\n        method: 'GET',\n      }),\n    );\n\n    const responses = await Promise.all(requests);\n    const data = await Promise.all(responses.map(response => response.json()));\n    return mergeArrays(data.map(transform), currencies);\n  } else {\n    return Promise.reject(new Error('currency collection is not defined'));\n  }\n};\n\n/**\n * Merge collection of objects with same props to object by keys.\n * @param {Object[]} array - a collection to merge.\n * @param {string[]} keys - a collection of keys in object values.\n * @return {Object | undefined} merged object.\n*/\nconst mergeArrays = (array: any[], keys: string[]): object | undefined => {\n  const data = array.shift();\n  // reduce?\n  data && array.forEach((elem, i) => {\n    const key = keys[i + 1].toLowerCase();\n    Object.keys(data).forEach(date => data[date][key] = elem[date][key]);\n  },\n  );\n\n  return data;\n};\n\nexport {getCurrencyRates};\n","import Module from './CurrencyView';\n\nexport default Module;\n","import React, {useState, useEffect} from 'react';\nimport Table from 'components/Table';\nimport Chart from 'components/Chart';\n\nimport {getCurrencyRates} from 'api';\n\nimport './currencyView.scss';\n\ninterface IProps {\n  currencies: string[];\n}\n\ninterface IState {\n  data: any;\n}\n\nexport default ({currencies}: IProps) => {\n  const [state, setState] = useState<IState>({\n    data: {},\n  });\n\n  useEffect(() => {\n    // request historical rates 4 testing\n    if (process.env.NODE_ENV !== 'production') {\n      getCurrencyRates(currencies, process.env.REACT_APP_FETCH_FROM)\n          .then(data => setState({data}))\n          .catch(error => console.error(error.message));\n    }\n\n    const {REACT_APP_FETCH_INTERVAL} = process.env;\n    const timerID = setInterval(\n        () => {\n          getCurrencyRates(currencies)\n              .then(rates => {\n                if (!(Object.keys(rates)[0] in state.data)) {\n                  setState(prevState => {\n                    const {data} = prevState;\n\n                    return {'data': {...data, ...rates}};\n                  });\n                }\n              })\n              .catch(error => console.error(error.message));\n        },\n        REACT_APP_FETCH_INTERVAL ? parseInt(REACT_APP_FETCH_INTERVAL) : 10000,\n    );\n\n    return () => clearInterval(timerID);\n  }, [currencies]);\n\n  const dates = Object.keys(state.data);\n\n  if (dates.length > 0) {\n    const fields = ['date', ...currencies];\n\n    const renderData = dates.map(key => {\n      return {\n        [fields[0]]: key,\n        ...state.data[key],\n      };\n    });\n\n    return (\n      <div className=\"currencyView\">\n        <Table fields={fields} data={[...renderData].reverse()} maxRows={5} />\n        <Chart xAxisDataKey={fields[0]} data={renderData} />\n      </div>\n    );\n  } else {\n    return (<div>No data. Please wait for updates...</div>);\n  }\n};\n","import Module from './Footer';\n\nexport default Module;\n","import React from 'react';\n\nimport './footer.scss';\n\nconst Footer: React.FunctionComponent = ({children}) => (\n  <footer className=\"footer\">\n    {children}\n    <a\n      className=\"footer__link\"\n      href=\"https://github.com/vdmkrchkn\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n          See my repos at github\n    </a>\n  </footer>\n);\n\nexport default Footer;\n","import React from 'react';\n\nimport Header from './components/Header';\nimport CurrencyView from './components/CurrencyView';\nimport Footer from './components/Footer';\n\nimport './App.css';\n\nconst App = () => {\n  const currencies = ['usd', 'eur'];\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <CurrencyView currencies={currencies} />\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","/* eslint-disable require-jsdoc */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n      .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n        // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n        // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.',\n        );\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}